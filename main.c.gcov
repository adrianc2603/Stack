        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "main.h"
        -:    2:
        -:    3:/**
        -:    4: * Initialise the stack and all its fields. Return a pointer to it
        -:    5: * Time Complexity: O(1)
        -:    6: */
        1:    7:Stack_t *create_stack() {
        1:    8:    Stack_t *stack = malloc(sizeof(Stack_t));
        1:    9:    stack->top = NULL;
        1:   10:    stack->size = 0;
        1:   11:    return stack;
        -:   12:}
        -:   13:
        -:   14:/**
        -:   15: * Inserts element e
        -:   16: * Time Complexity: O(1)
        -:   17: */
        4:   18:void push(Stack_t *stack, void *e) {
        4:   19:    if (stack == NULL) {
    #####:   20:        return;
        -:   21:    }
        4:   22:    node_t *new_node = malloc(sizeof(node_t));
        4:   23:    new_node->element = e;
        4:   24:    new_node->next = stack->top;
        4:   25:    stack->top = new_node;
        4:   26:    stack->size++;
        -:   27:}
        -:   28:
        -:   29:/**
        -:   30: * Removes and returns the last inserted element
        -:   31: * Time Complexity: O(1)
        -:   32: */
        5:   33:void *pop(Stack_t *stack) {
        5:   34:    if (stack == NULL) {
    #####:   35:        return NULL;
        -:   36:    }
        5:   37:    if (is_empty(stack)) {
        1:   38:        return NULL;
        -:   39:    }
        4:   40:    node_t *rem_node = stack->top;
        4:   41:    void *rem_elem = rem_node->element;
        4:   42:    stack->top = rem_node->next;
        4:   43:    stack->size--;
        4:   44:    free(rem_node);
        4:   45:    return rem_elem;
        -:   46:}
        -:   47:
        -:   48:/**
        -:   49: * Returns the last inserted element without removing it
        -:   50: * Time Complexity: O(1)
        -:   51: */
        7:   52:void *top(Stack_t *stack) {
        7:   53:    if (stack == NULL) {
    #####:   54:        return NULL;
        -:   55:    }
        7:   56:    if (is_empty(stack)) {
        2:   57:        return NULL;
        -:   58:    }
        5:   59:    return stack->top->element;
        -:   60:}
        -:   61:
        -:   62:/**
        -:   63: * Returns the number of elements stored
        -:   64: * Time Complexity: O(1)
        -:   65: */
        7:   66:int size(Stack_t *stack) {
        7:   67:    if (stack == NULL) {
    #####:   68:        return 0;
        -:   69:    }
        7:   70:    return stack->size;
        -:   71:}
        -:   72:
        -:   73:/**
        -:   74: * Returns whether elements are stored or not
        -:   75: * Time Complexity: O(1)
        -:   76: */
       21:   77:bool is_empty(Stack_t *stack) {
       21:   78:    if (stack == NULL) {
    #####:   79:        return true;
        -:   80:    }
       21:   81:    return (stack->size == 0);
        -:   82:}
        -:   83:
        -:   84:/**
        -:   85: * Free all memory associated with the stack
        -:   86: * Time Complexity: O(n)
        -:   87: */
        1:   88:void destroy_stack(Stack_t *stack) {
        1:   89:    if (stack == NULL) {
    #####:   90:        return;
        -:   91:    }
        3:   92:    while (!is_empty(stack)) {
        1:   93:        pop(stack);
        -:   94:    }
        1:   95:    free(stack);
        -:   96:}
